
"use client";

import { useEffect, useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Skeleton } from '@/components/ui/skeleton';
import { getArticleSummary } from '@/lib/actions'; // Server Action
import { AlertCircle, CheckCircle2, Link as LinkIcon } from 'lucide-react';
import Link from 'next/link';

interface ArticleSummaryModalProps {
  articleUrl: string;
  articleTitle: string;
  isOpen: boolean;
  onClose: () => void;
}

export default function ArticleSummaryModal({ articleUrl, articleTitle, isOpen, onClose }: ArticleSummaryModalProps) {
  const [summary, setSummary] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (isOpen && articleUrl) {
      setIsLoading(true);
      setError(null);
      setSummary(null);
      
      getArticleSummary(articleUrl)
        .then(data => {
          if (data.startsWith("Failed to summarize article")) { // Check for error prefix from server action
            setError(data);
          } else {
            setSummary(data);
          }
        })
        .catch(err => {
          console.error("Modal error fetching summary:", err);
          setError(err.message || "An unexpected error occurred.");
        })
        .finally(() => {
          setIsLoading(false);
        });
    }
  }, [isOpen, articleUrl]);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle className="font-headline text-2xl text-primary">AI Article Summary</DialogTitle>
          <DialogDescription className="text-sm">
            For: <span className="font-medium">{articleTitle}</span>
          </DialogDescription>
            <div className="text-xs text-muted-foreground pt-1">
                Source: {' '}
                <Link href={articleUrl} target="_blank" rel="noopener noreferrer" className="text-primary hover:underline inline-flex items-center gap-1">
                   {articleUrl} <LinkIcon className="h-3 w-3" />
                </Link>
            </div>
        </DialogHeader>
        
        <ScrollArea className="h-[350px] my-4 pr-4">
          {isLoading && (
            <div className="space-y-3">
              <Skeleton className="h-6 w-full" />
              <Skeleton className="h-4 w-5/6" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-4/6" />
              <Skeleton className="h-4 w-full" />
            </div>
          )}
          {error && (
            <div className="flex flex-col items-center justify-center text-destructive p-4 bg-destructive/10 rounded-md h-full">
              <AlertCircle className="h-12 w-12 mb-2" />
              <p className="font-semibold">Error Summarizing Article</p>
              <p className="text-sm text-center leading-relaxed">{error}</p>
            </div>
          )}
          {summary && !error && (
            <div className="prose prose-sm max-w-none text-foreground whitespace-pre-wrap">
              <p>{summary}</p>
            </div>
          )}
        </ScrollArea>

        <DialogFooter className="sm:justify-between items-center">
          <Button variant="outline" onClick={onClose}>
            Close
          </Button>
           {summary && !error && (
            <div className="text-xs text-muted-foreground flex items-center gap-1">
                <CheckCircle2 className="h-3 w-3 text-green-500"/>
                <span>Summary generated by AI</span>
            </div>
           )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
